#lang racket
(define in (open-input-file "/home/lucalliel/Desktop/fileGeo.geo"));abre o arquivo
(define nx(values (read-line in)));le a primeira linha
;funcao q tira o nx
(define (con a)
  (substring a 3))
;chama a funcao
(define a(con nx))
;divide a string em varias partes
(define b(string-split a))
;funcao que transforma string em numero
(define (num a)
  (string->number a))
;aplica a funcao num em todos os elementos da lista de strings(b)
(define valorNX (map num b))
(define max 5)
(define i (car valorNX))
(define nq (car (cdr valorNX)))
(define nh (car (cdr (cdr valorNX))))
(define ns (car (cdr (cdr (cdr valorNX)))))
(define nr (car (cdr (cdr (cdr (cdr valorNX))))))
(close-input-port in)
(define j (random i))
(define k (random i))
(define x (random 1 500))
(define y (random 1 500))
(define r (random 1 500))
(define w (random 1 500))
(define h (random 1 500))
(define num1 (random 1 5))
(define num2 (random 1 5))
(define raizQ (sqrt nq))
(define raizH (sqrt nh))
(define raizS (sqrt ns))
(define raizR (sqrt nr))
(define (random-string x)
  (set! x (random 4))
    (cond [(equal? x 0) "b0"]
          [(equal? x 1) "hnb0"]
          [(equal? x 2) "rbb0"]
          [(equal? x 3) "sfb0"]
          ))

(define out1 (open-output-file "/home/lucalliel/Desktop/qry/q-o.qry"))
(define (funcWhileo n)
  (set! j(random 1 i))
  (set! k(random 1 i))
  (cond
  [(= j k) (set! j(random 1 i))])
  (display (string-append "o?" " " (number->string j) " " (number->string k)"\n") out1)
  (cond
    [(> n 0) (funcWhileo (- n 1))]
    ))
(define resultadoo (funcWhileo max))
(close-output-port out1)

(define out2 (open-output-file "/home/lucalliel/Desktop/qry/q-i.qry"))
(define (funcWhilei n)
  (set! j(random 1 i))
  (set! x(random 1 1000))
  (set! y(random 1 1000))
  (display (string-append "i?" " " (number->string j) " " (number->string x) " " (number->string y) "\n") out2)
  (cond
    [(> n 0) (funcWhilei (- n 1))]
    ))
(define resultadoi (funcWhilei max))
(close-output-port out2)

(define out3 (open-output-file "/home/lucalliel/Desktop/qry/q-d.qry"))
(define (funcWhiled n)
  (set! j(random 1 i))
  (set! k(random 1 i))
  (cond
  [(= j k) (set! j(random 1 i))])
  (display (string-append "d?" " " (number->string j) " " (number->string k)"\n") out3)
  (cond
    [(> n 0) (funcWhiled (- n 1))]
    ))
(define resultado (funcWhiled max))
(close-output-port out3)

(define out4 (open-output-file "/home/lucalliel/Desktop/qry/q-bb.qry"))
(define sufixo "bbsuf01")
(define corbb "red")
(display (string-append "bb" " " sufixo " " corbb "\n") out4)
(close-output-port out4)

(define out5 (open-output-file "/home/lucalliel/Desktop/qry/q-dq.qry"))
(define metricaL1 "L1")
(define metricaL2 "L2")
(set! r 500)
(define stringaledq "rbb01.2")
(display (string-append "dq" " " metricaL2 " " stringaledq " " (number->string r)"\n") out5)
(set! r 200)
(set! stringaledq "sfb04.3")
(display (string-append "dq" " " metricaL1 " " stringaledq " " (number->string r)"\n") out5)
(set! r 100)
(set! stringaledq "hnb02.3.4")
(display (string-append "dq" " " metricaL1 " " stringaledq " " (number->string r)"\n") out5)
(close-output-port out5)

(define out6 (open-output-file "/home/lucalliel/Desktop/qry/q-del.qry"))
(set! num1 (random 1 raizQ))
(set! num2 (random 1 raizQ))
(define hidin (random 1 5))
(display (string-append "del" " " "b0" (number->string num1) "." (number->string num2)"\n") out6)
(set! num1 (random 1 raizQ))
(set! num2 (random 1 raizQ))
(display (string-append "del" " " "hnb0" (number->string num1) "." (number->string num2) "." (number->string hidin)"\n") out6)
(set! num1 (random 1 raizR))
(set! num2 (random 1 raizR))
(display (string-append "del" " " "rbb0" (number->string num1) "." (number->string num2)"\n") out6)
(set! num1 (random 1 raizS))
(set! num2 (random 1 raizS))
(display (string-append "del" " " "sfb0"(number->string num1) "." (number->string num2)"\n") out6)
(close-output-port out6)

(define out7 (open-output-file "/home/lucalliel/Desktop/qry/q-cbq.qry"))
(define (funcWhilecbq n)
  (define corcbq "green")
  (set! r 300)
  (set! x 20)
  (set! y 20)
  (display (string-append "cbq" " " (number->string x) " "(number->string y) " " (number->string r) " " "green" "\n") out7)
  (set! r 100)
  (set! x (* 3 100))
  (set! y (* 3 240))
  (display (string-append "cbq" " " (number->string x) " "(number->string y) " " (number->string r) " " "green" "\n") out7)
  (set! r 1000)
  (set! x (* raizQ 240))
  (set! y (* raizQ 240))
  (display (string-append "cbq" " " (number->string x) " "(number->string y) " " (number->string r) " " "yellow" "\n") out7)
  (cond
    [(> n 0) (funcWhilecbq (- n 1))]
    ))
(define resultado1 (funcWhilecbq 0))
(close-output-port out7)

(define out8 (open-output-file "/home/lucalliel/Desktop/qry/q-crd.qry"))
(define stringalecrd (random-string 0))
(set! num1 (random 1 raizQ))
(set! num2 (random 1 raizQ))
(set! hidin (random 1 5))
(display (string-append "crd?" " " "b0" (number->string num1) "." (number->string num2)"\n") out8)
(set! num1 (random 1 raizQ))
(set! num2 (random 1 raizQ))
(display (string-append "crd?" " " "hnb0" (number->string num1) "." (number->string num2) "." (number->string hidin)"\n") out8)
(set! num1 (random 1 raizR))
(set! num2 (random 1 raizR))
(display (string-append "crd?" " " "rbb0" (number->string num1) "." (number->string num2)"\n") out8)
(set! num1 (random 1 raizS))
(set! num2 (random 1 raizS))
(display (string-append "crd?" " " "sfb0"(number->string num1) "." (number->string num2)"\n") out8)
(close-output-port out8)

(define out9 (open-output-file "/home/lucalliel/Desktop/qry/q-trns.qry"))
(define (funcWhiletrns n)
  (set! w 20 )
  (set! h (random 1 1000))
  (set! x (random 1 1000))
  (set! y (random 1 1000))
  (define dx (random -300 300))
  (define dy (random -300 300))
  (display (string-append "trns" " "(number->string x) " "(number->string y) " " (number->string w) " "(number->string h) " "(number->string dx) " "(number->string dy) "\n") out9)
  (cond
    [(> n 0) (funcWhiletrns (- n 1))]
    ))
(define resultado2 (funcWhiletrns max))
(close-output-port out9)